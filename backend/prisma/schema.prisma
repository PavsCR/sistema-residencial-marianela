// ============================================
// PRISMA SCHEMA - Sistema Residencial Marianela
// ============================================
// Este archivo define la estructura de la base de datos
// Prisma generará automáticamente:
// - Tipos TypeScript
// - Queries type-safe
// - Migraciones SQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// MODELOS DE AUTENTICACIÓN Y SEGURIDAD
// ============================================

/// Casas del residencial
model Casa {
  idCasa        Int       @id @default(autoincrement()) @map("id_casa")
  numeroCasa    String    @unique @map("numero_casa") @db.VarChar(10)
  estadoPago    String    @default("al_dia") @map("estado_pago") @db.VarChar(50) // al_dia, moroso, en_arreglo
  creadoEn      DateTime  @default(now()) @map("creado_en")
  actualizadoEn DateTime  @updatedAt @map("actualizado_en")

  // Relaciones
  usuarios      Usuario[]

  @@map("casas")
}

/// Roles de usuario en el sistema
model Rol {
  idRol         Int       @id @default(autoincrement()) @map("id_rol")
  nombreRol     String    @unique @map("nombre_rol") @db.VarChar(50)
  descripcion   String?   @db.Text
  creadoEn      DateTime  @default(now()) @map("creado_en")
  actualizadoEn DateTime  @updatedAt @map("actualizado_en")

  // Relaciones
  usuarios      Usuario[]

  @@map("roles")
}

/// Usuarios del sistema (vecinos y administradores)
model Usuario {
  idUsuario              Int       @id @default(autoincrement()) @map("id_usuario")
  nombreCompleto         String    @map("nombre_completo") @db.VarChar(255)
  correoElectronico      String    @unique @map("correo_electronico") @db.VarChar(255)
  telefono               String?   @map("telefono") @db.VarChar(20)
  contrasenaHash         String    @map("contrasena_hash") @db.VarChar(255)
  idRol                  Int       @map("id_rol")
  idCasa                 Int?      @map("id_casa")
  estadoCuenta           String    @default("pendiente") @map("estado_cuenta") @db.VarChar(50) // pendiente, activo, suspendido, rechazado
  fechaRegistro          DateTime  @default(now()) @map("fecha_registro")
  fechaAprobacion        DateTime? @map("fecha_aprobacion")
  fechaUltimoAcceso      DateTime? @map("fecha_ultimo_acceso")
  tokenRecuperacion      String?   @map("token_recuperacion") @db.VarChar(255)
  tokenRecuperacionExpira DateTime? @map("token_recuperacion_expira")
  intentosFallidos       Int       @default(0) @map("intentos_fallidos")
  bloqueadoHasta         DateTime? @map("bloqueado_hasta")
  creadoEn               DateTime  @default(now()) @map("creado_en")
  actualizadoEn          DateTime  @updatedAt @map("actualizado_en")

  // Relaciones
  rol                    Rol       @relation(fields: [idRol], references: [idRol])
  casa                   Casa?     @relation(fields: [idCasa], references: [idCasa])
  historialOperaciones   HistorialOperacion[]
  sesionesActivas        SesionActiva[]
  solicitudesCambio      SolicitudCambio[]
  solicitudesCambioRevisadas SolicitudCambio[] @relation("ReviewedChanges")

  @@index([correoElectronico])
  @@index([estadoCuenta])
  @@index([idCasa])
  @@map("usuarios")
}

/// Solicitudes de registro pendientes de aprobación por administrador
model SolicitudRegistro {
  idSolicitud       Int       @id @default(autoincrement()) @map("id_solicitud")
  nombreCompleto    String    @map("nombre_completo") @db.VarChar(255)
  correoElectronico String    @map("correo_electronico") @db.VarChar(255)
  telefono          String?   @map("telefono") @db.VarChar(20)
  numeroCasa        String    @default("0") @map("numero_casa") @db.VarChar(10)
  contrasenaHash    String    @map("contrasena_hash") @db.VarChar(255)
  estado            String    @default("pendiente") @map("estado") @db.VarChar(50) // pendiente, aprobada, rechazada
  fechaSolicitud    DateTime  @default(now()) @map("fecha_solicitud")
  fechaRevision     DateTime? @map("fecha_revision")
  idRevisor         Int?      @map("id_revisor")
  comentarios       String?   @db.Text
  creadoEn          DateTime  @default(now()) @map("creado_en")
  actualizadoEn     DateTime  @updatedAt @map("actualizado_en")

  @@map("solicitudes_registro")
}

/// Solicitudes de edición de información personal (nombre, correo, teléfono)
model SolicitudEdicionInfo {
  idSolicitud           Int       @id @default(autoincrement()) @map("id_solicitud")
  idUsuario             Int       @map("id_usuario") // Usuario que solicita edición
  nombreCompletoActual  String    @map("nombre_completo_actual") @db.VarChar(255)
  nombreCompletoNuevo   String?   @map("nombre_completo_nuevo") @db.VarChar(255)
  correoActual          String    @map("correo_actual") @db.VarChar(255)
  correoNuevo           String?   @map("correo_nuevo") @db.VarChar(255)
  telefonoActual        String?   @map("telefono_actual") @db.VarChar(20)
  telefonoNuevo         String?   @map("telefono_nuevo") @db.VarChar(20)
  estado                String    @default("pendiente") @map("estado") @db.VarChar(50) // pendiente, aprobada, rechazada
  fechaSolicitud        DateTime  @default(now()) @map("fecha_solicitud")
  fechaRevision         DateTime? @map("fecha_revision")
  idRevisor             Int?      @map("id_revisor")
  comentarios           String?   @db.Text
  creadoEn              DateTime  @default(now()) @map("creado_en")
  actualizadoEn         DateTime  @updatedAt @map("actualizado_en")

  @@map("solicitudes_edicion_info")
}

/// Solicitudes de desactivación de cuenta (MI_03)
model SolicitudDesactivacion {
  idSolicitud         Int       @id @default(autoincrement()) @map("id_solicitud")
  idUsuarioSolicitante Int      @map("id_usuario_solicitante") // Usuario que hace la solicitud
  idUsuarioDesactivar Int       @map("id_usuario_desactivar") // Usuario que se desea desactivar
  motivo              String    @map("motivo") @db.Text
  estado              String    @default("pendiente") @map("estado") @db.VarChar(50) // pendiente, aprobada, rechazada
  fechaSolicitud      DateTime  @default(now()) @map("fecha_solicitud")
  fechaRevision       DateTime? @map("fecha_revision")
  idRevisor           Int?      @map("id_revisor")
  comentarios         String?   @db.Text
  creadoEn            DateTime  @default(now()) @map("creado_en")
  actualizadoEn       DateTime  @updatedAt @map("actualizado_en")

  @@map("solicitudes_desactivacion")
}

/// Solicitudes de reactivación de cuenta
model SolicitudReactivacion {
  idSolicitud       Int       @id @default(autoincrement()) @map("id_solicitud")
  idUsuario         Int       @map("id_usuario") // Usuario suspendido que solicita reactivación
  motivo            String    @map("motivo") @db.Text
  numeroCasaNuevo   String    @map("numero_casa_nuevo") @db.VarChar(10) // Casa donde desea ser reactivado
  estado            String    @default("pendiente") @map("estado") @db.VarChar(50) // pendiente, aprobada, rechazada
  fechaSolicitud    DateTime  @default(now()) @map("fecha_solicitud")
  fechaRevision     DateTime? @map("fecha_revision")
  idRevisor         Int?      @map("id_revisor")
  comentarios       String?   @db.Text
  creadoEn          DateTime  @default(now()) @map("creado_en")
  actualizadoEn     DateTime  @updatedAt @map("actualizado_en")

  @@map("solicitudes_reactivacion")
}

/// Historial completo de operaciones para auditoría (Requerimiento AS_06)
model HistorialOperacion {
  idOperacion      Int       @id @default(autoincrement()) @map("id_operacion")
  idUsuario        Int       @map("id_usuario")
  tipoOperacion    String    @map("tipo_operacion") @db.VarChar(100) // login, logout, registro, modificacion, transaccion
  descripcion      String    @db.Text
  ipAddress        String?   @map("ip_address") @db.VarChar(45)
  userAgent        String?   @map("user_agent") @db.Text
  datosAdicionales Json?     @map("datos_adicionales") @db.JsonB
  fechaOperacion   DateTime  @default(now()) @map("fecha_operacion")

  // Relaciones
  usuario          Usuario   @relation(fields: [idUsuario], references: [idUsuario])

  @@index([idUsuario])
  @@index([fechaOperacion])
  @@map("historial_operaciones")
}

/// Solicitudes de cambio de información de usuario
model SolicitudCambio {
  idSolicitud      Int       @id @default(autoincrement()) @map("id_solicitud")
  idUsuario        Int       @map("id_usuario")
  datosOriginales  Json      @map("datos_originales") @db.JsonB
  datosNuevos      Json      @map("datos_nuevos") @db.JsonB
  motivo           String    @db.Text
  estado           String    @default("pendiente") @map("estado") @db.VarChar(50) // pendiente, aprobada, rechazada
  fechaSolicitud   DateTime  @default(now()) @map("fecha_solicitud")
  fechaRevision    DateTime? @map("fecha_revision")
  idRevisor        Int?      @map("id_revisor")
  comentarios      String?   @db.Text
  creadoEn         DateTime  @default(now()) @map("creado_en")
  actualizadoEn    DateTime  @updatedAt @map("actualizado_en")

  // Relaciones
  usuario          Usuario   @relation(fields: [idUsuario], references: [idUsuario])
  revisor          Usuario?  @relation("ReviewedChanges", fields: [idRevisor], references: [idUsuario])

  @@map("solicitudes_cambio")
}

/// Sesiones JWT activas para rastreo y revocación
model SesionActiva {
  idSesion        Int       @id @default(autoincrement()) @map("id_sesion")
  idUsuario       Int       @map("id_usuario")
  tokenHash       String    @map("token_hash") @db.VarChar(255)
  ipAddress       String?   @map("ip_address") @db.VarChar(45)
  userAgent       String?   @map("user_agent") @db.Text
  fechaInicio     DateTime  @default(now()) @map("fecha_inicio")
  fechaExpiracion DateTime  @map("fecha_expiracion")
  activo          Boolean   @default(true)

  // Relaciones
  usuario         Usuario   @relation(fields: [idUsuario], references: [idUsuario])

  @@index([idUsuario])
  @@index([activo])
  @@map("sesiones_activas")
}
