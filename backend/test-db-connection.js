/**
 * SCRIPT DE DIAGN√ìSTICO DE CONEXI√ìN A BASE DE DATOS
 *
 * Este script prueba diferentes configuraciones para conectarse a AWS RDS
 * y te ayuda a identificar qu√© est√° bloqueando la conexi√≥n.
 */

const { Client } = require('pg');
require('dotenv').config();

console.log('\n' + '='.repeat(60));
console.log('üîç DIAGN√ìSTICO DE CONEXI√ìN AWS RDS');
console.log('='.repeat(60) + '\n');

// Mostrar configuraci√≥n (sin mostrar la contrase√±a completa)
console.log('üìã Configuraci√≥n actual:');
console.log(`   Host: ${process.env.DB_HOST}`);
console.log(`   Puerto: ${process.env.DB_PORT}`);
console.log(`   Base de datos: ${process.env.DB_NAME}`);
console.log(`   Usuario: ${process.env.DB_USER}`);
console.log(`   Contrase√±a: ${process.env.DB_PASSWORD ? '***' + process.env.DB_PASSWORD.slice(-4) : 'NO CONFIGURADA'}`);
console.log('\n');

// Configuraciones a probar
const configs = [
  {
    name: 'Configuraci√≥n 1: SSL con rejectUnauthorized: false',
    config: {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      database: process.env.DB_NAME,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      ssl: {
        rejectUnauthorized: false
      },
      connectionTimeoutMillis: 5000,
    }
  },
  {
    name: 'Configuraci√≥n 2: SSL true (simple)',
    config: {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      database: process.env.DB_NAME,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      ssl: true,
      connectionTimeoutMillis: 5000,
    }
  },
  {
    name: 'Configuraci√≥n 3: Sin SSL',
    config: {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      database: process.env.DB_NAME,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      ssl: false,
      connectionTimeoutMillis: 5000,
    }
  }
];

// Funci√≥n para probar una configuraci√≥n
async function testConfig(name, config) {
  console.log(`\nüß™ Probando: ${name}`);
  console.log('‚îÄ'.repeat(60));

  const client = new Client(config);

  try {
    console.log('   ‚è≥ Conectando...');
    await client.connect();
    console.log('   ‚úÖ ¬°CONEXI√ìN EXITOSA!');

    // Probar una query simple
    const result = await client.query('SELECT version(), current_database(), current_user');
    console.log('   ‚úÖ Query ejecutada correctamente');
    console.log(`   üìä Base de datos: ${result.rows[0].current_database}`);
    console.log(`   üë§ Usuario: ${result.rows[0].current_user}`);
    console.log(`   üì¶ Versi√≥n PostgreSQL: ${result.rows[0].version.split(',')[0]}`);

    await client.end();
    return true;
  } catch (error) {
    console.log('   ‚ùå Error al conectar');
    console.log(`   üìù Tipo de error: ${error.code || 'UNKNOWN'}`);
    console.log(`   üí¨ Mensaje: ${error.message}`);

    // Diagn√≥stico espec√≠fico seg√∫n el error
    if (error.code === 'ECONNREFUSED') {
      console.log('   ‚ö†Ô∏è  El servidor rechaz√≥ la conexi√≥n');
      console.log('   üí° Posibles causas:');
      console.log('      - El host o puerto son incorrectos');
      console.log('      - El servidor PostgreSQL no est√° ejecut√°ndose');
    } else if (error.code === 'ETIMEDOUT' || error.message.includes('timeout')) {
      console.log('   ‚ö†Ô∏è  Timeout de conexi√≥n');
      console.log('   üí° Posibles causas:');
      console.log('      - Security Group de AWS no permite tu IP');
      console.log('      - Firewall bloqueando el puerto 5432');
      console.log('      - La instancia RDS est√° pausada o inaccesible');
    } else if (error.code === '28P01') {
      console.log('   ‚ö†Ô∏è  Autenticaci√≥n fallida');
      console.log('   üí° Verifica usuario y contrase√±a');
    } else if (error.code === '3D000') {
      console.log('   ‚ö†Ô∏è  Base de datos no existe');
      console.log('   üí° Verifica el nombre de la base de datos');
    }

    try {
      await client.end();
    } catch (e) {
      // Ignorar errores al cerrar
    }
    return false;
  }
}

// Ejecutar pruebas
async function runDiagnostics() {
  let successCount = 0;

  for (const { name, config } of configs) {
    const success = await testConfig(name, config);
    if (success) {
      successCount++;
    }
  }

  console.log('\n' + '='.repeat(60));
  console.log('üìä RESUMEN DEL DIAGN√ìSTICO');
  console.log('='.repeat(60));
  console.log(`Pruebas exitosas: ${successCount}/${configs.length}\n`);

  if (successCount === 0) {
    console.log('‚ùå No se pudo conectar con ninguna configuraci√≥n\n');
    console.log('üîß PASOS RECOMENDADOS:');
    console.log('1. Verifica que la instancia RDS est√© activa en AWS Console');
    console.log('2. Verifica el Security Group:');
    console.log('   - Ve a AWS Console ‚Üí RDS ‚Üí Tu instancia');
    console.log('   - Click en la pesta√±a "Connectivity & security"');
    console.log('   - Click en el Security Group');
    console.log('   - Agrega una regla Inbound:');
    console.log('     * Type: PostgreSQL');
    console.log('     * Port: 5432');
    console.log('     * Source: 0.0.0.0/0 (para pruebas) o tu IP espec√≠fica');
    console.log('3. Verifica que "Publicly accessible" est√© en "Yes"');
    console.log('4. Espera 1-2 minutos despu√©s de cambiar el Security Group\n');
  } else if (successCount < configs.length) {
    console.log('‚ö†Ô∏è  Algunas configuraciones funcionaron\n');
    console.log('üí° Usa la configuraci√≥n que funcion√≥ en tu archivo database.ts\n');
  } else {
    console.log('‚úÖ ¬°Todas las configuraciones funcionaron!\n');
    console.log('üí° Tu base de datos est√° configurada correctamente\n');
  }
}

// Ejecutar
runDiagnostics().catch(error => {
  console.error('\n‚ùå Error cr√≠tico:', error);
  process.exit(1);
});
